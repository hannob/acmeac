#!/usr/bin/python3
# SPDX-License-Identifier: 0BSD

import argparse
import json
import pathlib

import requests
from cryptography.exceptions import UnsupportedAlgorithm
from jwcrypto import jwk, jws

LEDIR = {
    "keyChange": "https://acme-v02.api.letsencrypt.org/acme/key-change",
    "meta": {
        "caaIdentities": ["letsencrypt.org"],
        "profiles": {"classic": "The same profile you're accustomed to"},
        "termsOfService": "https://letsencrypt.org/documents/LE-SA-v1.4-April-3-2024.pdf",
        "website": "https://letsencrypt.org",
    },
    "newAccount": "https://acme-v02.api.letsencrypt.org/acme/new-acct",
    "newNonce": "https://acme-v02.api.letsencrypt.org/acme/new-nonce",
    "newOrder": "https://acme-v02.api.letsencrypt.org/acme/new-order",
    "renewalInfo": "https://acme-v02.api.letsencrypt.org/draft-ietf-acme-ari-03/renewalInfo",
    "revokeCert": "https://acme-v02.api.letsencrypt.org/acme/revoke-cert",
}


def getnonce():
    return requests.post(LEDIR["newNonce"], timeout=60).headers["replay-nonce"]


def doreq(action, key, req, acctid=None):
    if action:
        aurl = LEDIR[action]
    else:
        aurl = acctid
    protected = {
        "url": aurl,
        "nonce": getnonce(),
    }

    if key.get("kty") == "RSA":
        protected["alg"] = "RS256"
    elif key.get("kty") == "EC" and key.get("crv") == "P-256":
        protected["alg"] = "ES256"
    elif key.get("kty") == "EC" and key.get("crv") == "P-384":
        protected["alg"] = "ES384"
    else:
        errmsg(f"Unsupported key type {jkey.get('kty')}/{jkey.get('crv')}")
        return False, False

    if acctid:
        protected["kid"] = acctid
    else:
        protected["jwk"] = key.export_public(as_dict=True)

    xreq = jws.JWS(json.dumps(req))
    try:
        xreq.add_signature(key, None, protected)
    except ValueError:
        errmsg("Signature error, possibly key too small")
        return False, False
    jreq = json.loads(xreq.serialize())
    headers = {"Content-Type": "application/jose+json"}
    x = requests.post(aurl, json=jreq, timeout=60, headers=headers)

    return x.headers, x.content.decode()


def errmsg(msg):
    if not args.silent:
        print(msg)


INFOREQ = {"termsOfServiceAgreed": True, "onlyReturnExisting": True}


if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("keys", nargs="+")
    ap.add_argument("-s", "--silent", action="store_true", help="Don't output failures")
    ap.add_argument("--delete", action="store_true", help="Delete ACME account")
    ap.add_argument("--order", action="store_true", help="Create order")
    ap.add_argument("-d", "--domain")
    ap.add_argument("-a", "--acctid")
    args = ap.parse_args()

    tool = "info"
    if args.order:
        tool = "order"
    if args.delete:
        tool = "delete"

    for keyfile in args.keys:

        pemkey = pathlib.Path(keyfile).read_bytes()

        try:
            jkey = jwk.JWK().from_pem(pemkey)
        except (jwk.InvalidJWKValue, KeyError, TypeError, UnsupportedAlgorithm):
            errmsg(f"Import error, unsupported key in {keyfile}")
            continue
        except ValueError:
            errmsg(f"Import error, no key in {keyfile}")
            continue

        if tool == "info":
            headers, data = doreq("newAccount", jkey, INFOREQ)
            if headers is False:
                continue
            if "Location" not in headers:
                errmsg(keyfile)
                errmsg("ERROR: Could not request account info")
                errmsg(headers)
                errmsg(data)
            else:
                print(keyfile)
                acctid = headers["Location"]
                print(f"Account ID: {acctid}")
                print(data)
        elif tool == "order":
            if args.acctid:
                acctid = args.acctid
            else:
                headers, _ = doreq("newAccount", jkey, INFOREQ)
                acctid = headers["Location"]
            dreq = {"identifiers": [{"type": "dns", "value": args.domain}]}
            h, d = doreq("newOrder", jkey, dreq, acctid)
            print(h)
            print(d)
        elif tool == "delete":
            if args.acctid:
                acctid = args.acctid
            else:
                headers, _ = doreq("newAccount", jkey, INFOREQ)
                acctid = headers["Location"]
            dreq = {"status": "deactivated"}
            h, d = doreq(None, jkey, dreq, acctid)
            print(h)
            print(d)
        else:
            print("Tool must be one of info, order, deleteaccount")
